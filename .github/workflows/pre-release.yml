# File: .github/workflows/pre-release.yml

name: Build & Pre-release MokkyBuddy VSCode Plugin

permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches:
      - 'features/**'
      - 'feature/**'

jobs:
  build-and-pre-release:
    runs-on: ubuntu-latest
    steps:
      # --- Checkout plugin e Java App ---
      - name: Checkout Plugin Repo
        uses: actions/checkout@v3
        with:
          repository: stapeDev/it.stapedev.vscode.mokkybuddy
          token: ${{ secrets.GITHUB_TOKEN }}
          path: plugin
          fetch-depth: 0

      - name: Checkout Java App Repo
        uses: actions/checkout@v3
        with:
          repository: stapeDev/it.stapedev.api.mokkybuddy
          ref: main
          token: ${{ secrets.JAVA_APP_PAT }}
          path: app
          fetch-depth: 0

      # --- Setup ambiente ---
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # --- Installazione GitHub CLI ---
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install gh -y

      # --- Recupero versione Java App ---
      - name: Get Java App version
        id: get_java_version
        run: |
          VERSION=$(mvn -f app/pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)
          VERSION_CLEAN=${VERSION/-SNAPSHOT/}
          echo "java_version_clean=$VERSION_CLEAN" >> $GITHUB_OUTPUT
          echo "Found Java App version: $VERSION_CLEAN"

      # --- Download JAR da GitHub Release ---
      - name: Download JAR artifact from Java App release
        env:
          JAVA_APP_PAT: ${{ secrets.JAVA_APP_PAT }}
          VERSION: ${{ steps.get_java_version.outputs.java_version_clean }}
        run: |
          REPO="stapeDev/it.stapedev.api.mokkybuddy"
          TARGET_DIR="plugin/resources"
          TARGET_FILE="$TARGET_DIR/mokkyBuddyAPI.jar"
          mkdir -p "$TARGET_DIR"

          echo "Downloading JAR for version v$VERSION"
          RELEASE_ID=$(curl -s -H "Authorization: token $JAVA_APP_PAT" \
            -H "Accept: application/vnd.github.com/v3+json" \
            "https://api.github.com/repos/$REPO/releases/tags/v$VERSION" \
            | jq -r '.id')
          
          if [ -z "$RELEASE_ID" ] || [ "$RELEASE_ID" == "null" ]; then
            echo "Release 'v$VERSION' non trovata. Controlla che il tag esista nel repository di Java App."
            exit 1
          fi

          ASSET_URL=$(curl -s -H "Authorization: token $JAVA_APP_PAT" \
            -H "Accept: application/vnd.github.com/v3+json" \
            "https://api.github.com/repos/$REPO/releases/$RELEASE_ID/assets" \
            | jq -r '.[] | select(.name | endswith(".jar")) | .url')

          if [ -z "$ASSET_URL" ] || [ "$ASSET_URL" == "null" ]; then
            echo "Asset JAR non trovato per la release 'v$VERSION'."
            exit 1
          fi

          curl -L -H "Authorization: token $JAVA_APP_PAT" \
            -H "Accept: application/octet-stream" \
            "$ASSET_URL" -o "$TARGET_FILE"
          
          echo "JAR scaricato in $TARGET_FILE"

      # --- Installazione dipendenze e test del Plugin ---
      - name: Install Plugin dependencies
        working-directory: plugin
        run: npm ci

      - name: Run Plugin tests
        working-directory: plugin
        run: npm test

      # --- Aggiorna versione plugin e documentazione ---
      - name: Update plugin version and documentation
        working-directory: plugin
        id: update_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CURRENT_VERSION=$(jq -r '.version' package.json)
          JAVA_VERSION=${{ steps.get_java_version.outputs.java_version_clean }}

          semver_gt() {
            [ "$(printf '%s\n' "$1" "$2" | sort -V | tail -n1)" = "$1" ]
          }
          
          BUMP_TYPE="patch"
          if git log --pretty=oneline --since="2 days ago" | grep -q "feat"; then
            BUMP_TYPE="minor"
          elif git log --pretty=oneline --since="2 days ago" | grep -q "BREAKING CHANGE"; then
            BUMP_TYPE="major"
          fi
          
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          if [ $((MINOR % 2)) -eq 0 ]; then
            NEW_MINOR=$((MINOR + 1))
            NEW_PATCH=0
          else
            NEW_MINOR=$MINOR
            NEW_PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$NEW_MINOR.$NEW_PATCH"

          if semver_gt "$JAVA_VERSION" "$NEW_VERSION"; then
            echo "Allineiamo alla versione Java App $JAVA_VERSION"
            NEW_VERSION=$JAVA_VERSION
          else
            echo "Non ci sono differenze di versione, facciamo un bump $BUMP_TYPE"
          fi

          # Usa un approccio piÃ¹ sicuro per l'aggiornamento JSON
          jq ".version = \"$NEW_VERSION\"" package.json > temp_package.json && mv temp_package.json package.json
          jq ".version = \"$NEW_VERSION\"" vss-extension.json > temp_vss.json && mv temp_vss.json vss-extension.json
          
          sed -i "s|Java App v[0-9]\+\.[0-9]\+\.[0-9]\+|Java App v${JAVA_VERSION}|g" README.md
          
          LAST_TAG=$(git describe --tags --abbrev=0)
          COMMITS=$(git log --pretty=format:"- %s" ${LAST_TAG}..HEAD)

          echo -e "$COMMITS\n\n$(cat CHANGELOG.md)" > CHANGELOG.md
          
          FEATURES=$(echo "$COMMITS" | grep "feat\|BREAKING CHANGE")
          if [ -n "$FEATURES" ]; then
            echo -e "$FEATURES\n\n$(cat features.md)" > features.md
          fi
          
          echo "RELEASE_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      # --- Creazione tag, commit e push ---
      - name: Create tag, commit, and push
        working-directory: plugin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION=${{ steps.update_version.outputs.RELEASE_VERSION }}
          TAG_NAME="v${NEW_VERSION}-pre"
          BRANCH_NAME="pre-release-v$NEW_VERSION"

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          
          # Controlla se ci sono modifiche da committare
          if [[ $(git status --porcelain) ]]; then
            git add resources/mokkyBuddyAPI.jar package.json vss-extension.json README.md CHANGELOG.md features.md
            git commit -m "chore(pre-release): Update to v$NEW_VERSION"
          else
            echo "Nessuna modifica da committare, si salta il commit."
          fi

          git tag $TAG_NAME -a -m "Pre-release tag for v$NEW_VERSION"
          git checkout -b "$BRANCH_NAME"
          git push -u origin "$BRANCH_NAME"
          git push --tags
          
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT

      # --- Creazione Pull Request ---
      - name: Create Pull Request
        working-directory: plugin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: ${{ steps.create_tag_commit_push.outputs.BRANCH_NAME }}
        run: |
          gh pr create --base main --head "$BRANCH_NAME" \
            --title "chore(pre-release): v${{ steps.update_version.outputs.RELEASE_VERSION }}" \
            --body "Aggiorna il branch \`main\` per la pre-release del plugin MokkyBuddy v${{ steps.update_version.outputs.RELEASE_VERSION }}."

      # --- Pubblicazione su Marketplace (pre-release) ---
      - name: Publish VSCode Plugin (pre-release)
        working-directory: plugin
        run: |
          npx @vscode/vsce publish --pre-release
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
