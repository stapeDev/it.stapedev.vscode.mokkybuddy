name: Build & Pre-release MokkyBuddy VSCode Plugin
permissions:
  contents: read
  pull-requests: write

on:
  repository_dispatch:
    types: [trigger-plugin-pre-release-build]
  push:
    branches:
      - 'features/**'
      - 'feature/**'

jobs:
  build_and_pre_release:
    runs-on: ubuntu-latest
    steps:
      # --- Checkout Plugin e Java App ---
      - name: Checkout Plugin Repo
        uses: actions/checkout@v3
        with:
          repository: stapeDev/it.stapedev.vscode.mokkybuddy
          token: ${{ secrets.GITHUB_TOKEN }}
          path: plugin
          fetch-depth: 0

      - name: Checkout Java App Repo
        uses: actions/checkout@v3
        with:
          repository: stapeDev/it.stapedev.api.mokkybuddy
          ref: ${{ github.event.client_payload.branch || 'main' }}
          token: ${{ secrets.JAVA_APP_PAT }}
          path: app
          fetch-depth: 0

      # --- Setup Node e Download JAR ---
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Get Java App version
        id: get_java_version
        run: |
          VERSION=$(mvn -f app/pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)
          VERSION_CLEAN=${VERSION/-SNAPSHOT/}
          echo "java_version_clean=$VERSION_CLEAN" >> $GITHUB_OUTPUT

      - name: Download JAR artifact from Java App release
        env:
          JAVA_APP_PAT: ${{ secrets.JAVA_APP_PAT }}
          VERSION: ${{ steps.get_java_version.outputs.java_version_clean }}
        run: |
          REPO="stapeDev/it.stapedev.api.mokkybuddy"
          TARGET_DIR=plugin/resources
          TARGET_FILE=$TARGET_DIR/mokkyBuddyAPI.jar
          mkdir -p $TARGET_DIR
          RELEASE_ID=$(curl -s -H "Authorization: token $JAVA_APP_PAT" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/$REPO/releases/tags/v$VERSION" | jq -r '.id')
          if [ -z "$RELEASE_ID" ] || [ "$RELEASE_ID" == "null" ]; then echo "Release not found!"; exit 1; fi
          ASSET_URL=$(curl -s -H "Authorization: token $JAVA_APP_PAT" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/$REPO/releases/$RELEASE_ID/assets" | jq -r '.[] | select(.name | endswith(".jar")) | .url')
          curl -L -H "Authorization: token $JAVA_APP_PAT" -H "Accept: application/octet-stream" "$ASSET_URL" -o "$TARGET_FILE"

      # --- Build e Test ---
      - name: Install dependencies
        working-directory: plugin
        run: npm install

      - name: Run tests
        working-directory: plugin
        run: npm test

      # --- Crea l'artefatto del plugin (non la release!) ---
      - name: Package plugin artifact
        working-directory: plugin
        run: |
          npx @vscode/vsce package

      # --- Carica l'artefatto per renderlo disponibile alla pipeline di release ---
      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: vsix-artifact
          path: plugin/*.vsix

      # --- Crea la PR (rimossa la creazione del branch e del tag) ---
      - name: Create PR to main
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/heads/features/') }}
        run: |
          if gh pr list --base main --head ${{ github.ref_name }} --json number --jq '.[0].number' | grep -q .; then
            echo "PR from ${{ github.ref_name }} to main already exists, skip."
          else
            gh pr create \
              --base main \
              --head ${{ github.ref_name }} \
              --title "PR from feature branch ${{ github.ref_name }}" \
              --body "This PR was automatically created from branch ${{ github.ref_name }}."
          fi
        env:
          GH_TOKEN: ${{ secrets.INTERNAL_PLUGIN_CREATE_PR_PAT }}
          GH_REPO: stapeDev/it.stapedev.vscode.mokkybuddy