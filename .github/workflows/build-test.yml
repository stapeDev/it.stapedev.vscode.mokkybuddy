name: Build & Version MokkyBuddy VSCode Plugin

on:
  push:
    branches:
      - 'dependabot/**'
      - 'features/**'
      - 'feature/**'

jobs:
  build-and-version:
    runs-on: ubuntu-latest
    outputs:
      java_version_clean: ${{ steps.get_java_version_clean.outputs.java_version_clean }}
    steps:
      - name: Checkout Plugin Repo
        uses: actions/checkout@v3
        with:
          repository: stapeDev/it.stapedev.vscode.mokkybuddy
          token: ${{ secrets.GITHUB_TOKEN }}
          path: plugin

      - name: Checkout Java App Repo
        uses: actions/checkout@v3
        with:
          repository: stapeDev/it.stapedev.api.mokkybuddy
          ref: main
          token: ${{ secrets.JAVA_APP_PAT }}
          path: app
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Get Java App version
        id: get_java_version_clean
        run: |
          VERSION=$(mvn -f app/pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)
          VERSION_CLEAN=${VERSION/-SNAPSHOT/}
          echo "java_version_clean=$VERSION_CLEAN" >> $GITHUB_OUTPUT

      - name: Debug list plugin folder
        run: |
          echo "Listing plugin directory"
          ls -la plugin || true

      - name: Download JAR artifact from Java App release
        id: download_jar
        env:
          JAVA_APP_PAT: ${{ secrets.JAVA_APP_PAT }}
          VERSION: ${{ steps.get_java_version_clean.outputs.java_version_clean }}
        run: |
          REPO="stapeDev/it.stapedev.api.mokkybuddy"
          TARGET_DIR=plugin/resources
          TARGET_FILE=$TARGET_DIR/mokkyBuddyAPI.jar

          mkdir -p $TARGET_DIR

          RELEASE_ID=$(curl -s -H "Authorization: token $JAVA_APP_PAT" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/releases/tags/v$VERSION" \
            | jq -r '.id')

          if [ -z "$RELEASE_ID" ] || [ "$RELEASE_ID" == "null" ]; then
            echo "Release not found!"
            exit 1
          fi

          ASSET_URL=$(curl -s -H "Authorization: token $JAVA_APP_PAT" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/releases/$RELEASE_ID/assets" \
            | jq -r '.[] | select(.name | endswith(".jar")) | .url')

          if [ -z "$ASSET_URL" ]; then
            echo "Artifact JAR not found!"
            exit 1
          fi

          curl -L -H "Authorization: token $JAVA_APP_PAT" \
              -H "Accept: application/octet-stream" \
              "$ASSET_URL" -o "$TARGET_FILE"

          if [ ! -s "$TARGET_FILE" ]; then
            echo "ERROR: Downloaded JAR is empty!"
            exit 1
          fi

      - name: Install dependencies
        working-directory: plugin
        run: npm install

      - name: Run tests
        working-directory: plugin
        run: npm test

      - name: Ensure jq available
        run: jq --version

      - name: Get current plugin version
        id: get_plugin_version
        working-directory: plugin
        run: |
          PLUGIN_VERSION=$(jq -r '.version' package.json)
          echo "plugin_version=$PLUGIN_VERSION" >> $GITHUB_OUTPUT

      - name: Update plugin version to Java app version
        working-directory: plugin
        run: |
          JAVA_VERSION=${{ steps.get_java_version_clean.outputs.java_version_clean }}
          CURRENT_VERSION=$(jq -r '.version' package.json)

          if [ "$CURRENT_VERSION" == "$JAVA_VERSION" ]; then
            echo "Version $JAVA_VERSION already set, bumping patch"
            npm version patch --no-git-tag-version
          else
            echo "Updating version to $JAVA_VERSION"
            npm version $JAVA_VERSION --no-git-tag-version
          fi

          if [ -f vss-extension.json ]; then
            jq --arg v "$JAVA_VERSION" '.version=$v' vss-extension.json > vss-extension.tmp.json
            mv vss-extension.tmp.json vss-extension.json
          fi

      - name: Update README and generate CHANGELOG / FEATURES
        working-directory: plugin
        run: |
          set -euo pipefail
          set -x

          VERSION=$(jq -r '.version' package.json)

          echo "Updating README badges to version $VERSION"
          sed -i "s/badge\/version-[0-9]\+\.[0-9]\+\.[0-9]\+/badge\/version-$VERSION/" README.md || true

          echo "Generating changelog/feature snippets from Java app"
          # Assicuriamoci di trovarci nella cartella corretta
          if [ ! -d ../app ]; then
            echo "ERROR: ../app directory not found. Listing workspace:"
            ls -la
            exit 1
          fi

          cd ../app
          git fetch --tags --prune || true

          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            RANGE="HEAD"
          else
            RANGE="$LAST_TAG..HEAD"
          fi
          echo "Using git range: '$RANGE' (LAST_TAG='$LAST_TAG')"

          # Raccogliamo i log, ma non falliamo se non ci sono risultati
          FEATS=$(git log $RANGE --grep '^feat' --pretty=format:"- %s (%an)" --reverse || true)
          FIXES=$(git log $RANGE --grep '^fix' --pretty=format:"- %s (%an)" --reverse || true)
          CHORES=$(git log $RANGE --grep '^chore' --pretty=format:"- %s (%an)" --reverse || true)
          BREAKING=$(git log $RANGE --grep 'BREAKING CHANGE' --pretty=format:"- %s (%an)" --reverse || true)

          cd ../plugin

          # CHANGELOG.md
          [ ! -f CHANGELOG.md ] && echo "# Changelog" > CHANGELOG.md
          TMP=$(mktemp)
          echo "## Version $VERSION ($(date +'%Y-%m-%d'))" >> "$TMP"
          [ -n "$FEATS" ] && echo -e "\n### Features\n$FEATS" >> "$TMP"
          [ -n "$FIXES" ] && echo -e "\n### Fixes\n$FIXES" >> "$TMP"
          [ -n "$CHORES" ] && echo -e "\n### Chores\n$CHORES" >> "$TMP"
          [ -n "$BREAKING" ] && echo -e "\n### BREAKING CHANGES\n$BREAKING" >> "$TMP"
          cat "$TMP" CHANGELOG.md > CHANGELOG.new
          mv CHANGELOG.new CHANGELOG.md
          rm -f "$TMP"

          # FEATURES.md
          [ ! -f FEATURES.md ] && echo "# Features" > FEATURES.md
          echo "## Version $VERSION ($(date +'%Y-%m-%d'))" >> FEATURES.md
          if [ -n "$FEATS" ]; then
            echo "$FEATS" >> FEATURES.md
          fi

      - name: Commit version & docs updates
        working-directory: plugin
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add package.json vss-extension.json resources/mokkyBuddyAPI.jar README.md CHANGELOG.md FEATURES.md || true

          if ! git diff --cached --quiet; then
            git commit -m "Update plugin version, docs, resources [skip ci]" || echo "commit failed"
            CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            # Forza il push senza pull/rebase per evitare conflitti
            git push origin "$CURRENT_BRANCH" --force
          fi

      - name: Build VSCode Plugin (.vsix)
        working-directory: plugin
        run: npx vsce package

      - name: Upload plugin artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-final
          path: plugin

      - name: Trigger Pre-Release Workflow
        run: |
          echo "Triggering pre-release on branch $CURRENT_BRANCH"
           curl -X POST \
            -H "Authorization: token ${{ secrets.INTERNAL_PLUGIN_PAT }}" \
            -H "Accept: application/vnd.github+json" \
            -d '{"event_type": "trigger-pre-release-plugin-build", "branch":"$CURRENT_BRANCH"}' \
            https://api.github.com/repos/stapeDev/it.stapedev.vscode.mokkybuddy/dispatches
