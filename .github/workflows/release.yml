name: Release MokkyBuddy VSCode Plugin
# Concedi i permessi di scrittura al job per poter creare branch e tag.
permissions:
  contents: write

on:
  push:
    branches:
      - 'main'

jobs:
  release:
    # Esegui il job su un runner di Ubuntu.
    runs-on: ubuntu-latest
    steps:
      # --- Checkout del repository principale ---
      - name: Checkout Plugin Repo
        # Usa actions/checkout per clonare il repository.
        # Il token è fornito automaticamente dall'ambiente di GitHub Actions.
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # --- Configura l'identità Git ---
      - name: Configure Git identity
        # Imposta l'utente e l'email per i commit futuri.
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      # --- Installa le dipendenze (curl, jq) ---
      - name: Install dependencies
        # Aggiorna e installa jq e curl necessari per le API.
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      # --- Ottieni la versione più recente della pre-release ---
      - name: Get latest pre-release version
        id: version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: stapeDev/it.stapedev.vscode.mokkybuddy
        run: |
          # Usa l'API di GitHub per trovare la pre-release più recente.
          LATEST_PRERELEASE_TAG=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/releases" \
            | jq -r '.[] | select(.prerelease==true) | .tag_name' | sort -V | tail -n1)

          if [ -z "$LATEST_PRERELEASE_TAG" ] || [ "$LATEST_PRERELEASE_TAG" = "null" ]; then
            echo "No pre-release found!"
            exit 1
          fi

          # Estrai la versione pulita dal tag.
          ARTIFACT_VERSION="${LATEST_PRERELEASE_TAG#v}"
          ARTIFACT_VERSION="${ARTIFACT_VERSION%-pre}"

          echo "artifact_version=$ARTIFACT_VERSION" >> $GITHUB_OUTPUT
          echo "latest_prerelease_tag=$LATEST_PRERELEASE_TAG" >> $GITHUB_OUTPUT
          echo "Found latest pre-release tag: $LATEST_PRERELEASE_TAG -> artifact_version=$ARTIFACT_VERSION"

      # --- Scarica l'asset della pre-release ---
      - name: Download pre-release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: stapeDev/it.stapedev.vscode.mokkybuddy
          ARTIFACT_VERSION: ${{ steps.version.outputs.artifact_version }}
        run: |
          VERSION=${ARTIFACT_VERSION}
          LATEST_TAG=v${VERSION}-pre
          echo "Fetching release for tag $LATEST_TAG"
          RESP=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/releases/tags/$LATEST_TAG")

          # Trova l'URL dell'asset zip dal JSON della risposta.
          ASSET_URL=$(echo "$RESP" | jq -r '.assets[] | select(.name | endswith(".zip")) | .browser_download_url' || true)
          if [ -z "$ASSET_URL" ] || [ "$ASSET_URL" = "null" ]; then
            echo "Asset not found for tag $LATEST_TAG. Response:"
            echo "$RESP"
            exit 1
          fi

          FNAME=plugin-${VERSION}.zip
          echo "Downloading asset $FNAME from $ASSET_URL"
          # Scarica il file zip usando il token.
          curl -L -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/octet-stream" \
            "$ASSET_URL" -o "$FNAME"

          mkdir -p plugin-artifact
          unzip -o "$FNAME" -d plugin-artifact
          echo "Unzipped artifact into plugin-artifact/"

      # --- Leggi la versione del plugin dall'artifact scaricato ---
      - name: Read plugin version
        id: version_artifact
        run: |
          if [ -f plugin-artifact/package.json ]; then
            VERSION_ARTIFACT=$(jq -r '.version' plugin-artifact/package.json)
            echo "version_artifact=$VERSION_ARTIFACT" >> $GITHUB_OUTPUT
          else
            echo "version_artifact=" >> $GITHUB_OUTPUT
          fi

      # --- Copia l'artifact nel repository in modo robusto ---
      - name: Copy artifact into repo
        run: |
          set -euo pipefail

          # Prepara una cartella temporanea isolata e copia lì il contenuto dell'artifact.
          TMPDIR=$(mktemp -d)
          echo "Using temporary dir: $TMPDIR"
          rsync -a plugin-artifact/ "$TMPDIR"/

          # Poi sincronizza dalla cartella temp alla root del repo, escludendo file specifici.
          rsync -av --delete-after \
            --exclude 'package.json' \
            --exclude 'vss-extension.json' \
            --exclude 'node_modules' \
            "$TMPDIR"/ .

          RSYNC_EXIT=$?
          # Pulizia
          rm -rf "$TMPDIR"

          # Gestisci l'exit code di rsync. Ignora 24 (warning) e fallisci per gli altri.
          if [ $RSYNC_EXIT -eq 24 ]; then
            echo "rsync returned code 24 (some files vanished) — treating as non-fatal and continuing."
          elif [ $RSYNC_EXIT -ne 0 ]; then
            echo "rsync failed with exit code $RSYNC_EXIT — aborting."
            exit $RSYNC_EXIT
          fi

          # Aggiungi le modifiche a git.
          git add -A || true

      # --- Crea il tag di release ---
      - name: Create release tag
        working-directory: .
        run: |
          RELEASE_VERSION=$(jq -r '.version' package.json)
          TAG=v$RELEASE_VERSION

          # Controlla se il tag esiste già e lo aggiorna.
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            git tag -f "$TAG" -m "Release $RELEASE_VERSION"
          else
            git tag -a "$TAG" -m "Release $RELEASE_VERSION"
          fi

          # Esegui il push del tag.
          git push origin "$TAG" --force

      # --- Installa le dipendenze di Node ---
      - name: Install Node dependencies
        working-directory: .
        run: npm ci

      # --- Pubblica il plugin su VSCode Marketplace ---
      - name: Publish VSCode Plugin as release
        working-directory: .
        run: |
          PUBLISH_VERSION=$(jq -r '.version' package.json)
          echo "Publishing version from package.json: $PUBLISH_VERSION"
          # Usa npx per pubblicare il plugin.
          npx @vscode/vsce publish
        env:
          # Assicurati che il token di accesso personale sia configurato come segreto.
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
