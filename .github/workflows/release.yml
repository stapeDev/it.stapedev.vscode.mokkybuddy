name: Release MokkyBuddy VSCode Plugin
permissions:
  contents: write

on:
  push:
    branches:
      - 'main'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      # --- Checkout repo ---
      - name: Checkout Plugin Repo
        uses: actions/checkout@v3
        with:
          repository: stapeDev/it.stapedev.vscode.mokkybuddy
          token: ${{ secrets.GITHUB_TOKEN }}
          path: plugin-repo

      # --- Configure Git identity ---
      - name: Configure Git identity
        run: |
          cd plugin-repo
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      # --- Read version from main repository ---
      - name: Read plugin version
        id: version
        run: |
          VERSION=$(jq -r '.version' plugin-repo/package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # --- Download pre-release asset from GitHub Release ---
      - name: Download pre-release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: stapeDev/it.stapedev.vscode.mokkybuddy
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          TAG=v${VERSION}-pre
          echo "Fetching release for tag $TAG"
          RESP=$(curl -s -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/releases/tags/$TAG")

          ASSET_URL=$(echo "$RESP" | jq -r '.assets[] | select(.name | endswith(".zip")) | .browser_download_url')
          if [ -z "$ASSET_URL" ] || [ "$ASSET_URL" = "null" ]; then
            echo "Asset not found for tag $TAG. Response:"
            echo "$RESP"
            exit 1
          fi

          FNAME=plugin-${VERSION}.zip
          echo "Downloading asset $FNAME"
          curl -L -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/octet-stream" \
            "$ASSET_URL" -o "$FNAME"

          mkdir -p plugin-artifact
          unzip -o "$FNAME" -d plugin-artifact

      # --- Read version from artifact as fallback ---
      - name: Read plugin version (artifact fallback)
        id: version_artifact
        run: |
          if [ -f plugin-artifact/package.json ]; then
            VERSION_ARTIFACT=$(jq -r '.version' plugin-artifact/package.json)
            echo "version_artifact=$VERSION_ARTIFACT" >> $GITHUB_OUTPUT
          else
            echo "version_artifact=" >> $GITHUB_OUTPUT
          fi

      # --- Copy artifact into repository ---
      - name: Copy artifact into repo
        run: |
          cp -R plugin-artifact/* plugin-repo/
          cd plugin-repo
          git add -A

      # --- Create release branch ---
      - name: Create release branch
        run: |
          cd plugin-repo
          RELEASE_VERSION=${{ steps.version_artifact.outputs.version_artifact || steps.version.outputs.version }}
          RELEASE_BRANCH=release/$RELEASE_VERSION
          if git show-ref --verify --quiet refs/heads/$RELEASE_BRANCH; then
            git checkout $RELEASE_BRANCH
          else
            git checkout -b $RELEASE_BRANCH
          fi

          if ! git diff --cached --quiet; then
            git commit -m "Prepare release $RELEASE_VERSION [skip ci]"
            git push origin $RELEASE_BRANCH
          fi

      # --- Create release tag ---
      - name: Create release tag
        run: |
          cd plugin-repo
          RELEASE_VERSION=${{ steps.version_artifact.outputs.version_artifact || steps.version.outputs.version }}
          TAG=v$RELEASE_VERSION
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists, skip"
          else
            git tag -a $TAG -m "Release $TAG"
            git push origin $TAG
          fi
      
      # --- Install dependencies before publishing ---
      - name: Install Node dependencies
        working-directory: plugin-repo
        run: npm ci
        
      # --- Publish plugin to VSCode Marketplace ---
      - name: Publish VSCode Plugin as release
        working-directory: plugin-repo
        run: npx @vscode/vsce publish
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
