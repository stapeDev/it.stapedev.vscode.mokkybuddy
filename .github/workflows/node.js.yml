name: Build MokkyBuddy VSCode Plugin

on:
  push:
    branches:
      - main
  repository_dispatch:
    types: [trigger-plugin-build]
  workflow_run:
    workflows: ["Mokky Buddy CI/CD"]
    types:
      - completed

jobs:
  checkout:
    runs-on: ubuntu-latest
    outputs:
      java_version_clean: ${{ steps.get_java_version_clean.outputs.java_version_clean }}
    steps:
      - name: Checkout Plugin Repo
        uses: actions/checkout@v3
        with:
          repository: stapeDev/it.stapedev.vscode.mokkybuddy
          token: ${{ secrets.GITHUB_TOKEN }}
          path: plugin

      - name: Checkout Java App Repo (main branch for reference)
        uses: actions/checkout@v3
        with:
          repository: stapeDev/it.stapedev.api.mokkybuddy
          ref: main
          token: ${{ secrets.JAVA_APP_PAT }}
          path: app

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Get Java App version
        id: get_java_version_clean
        run: |
          VERSION=$(mvn -f app/pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)
          VERSION_CLEAN=${VERSION/-SNAPSHOT/}
          echo "java_version_clean=$VERSION_CLEAN" >> $GITHUB_OUTPUT

      - name: Upload plugin directory
        uses: actions/upload-artifact@v4
        with:
          name: plugin-files
          path: plugin

  prepare-jar:
    runs-on: ubuntu-latest
    needs: checkout
    outputs:
      jar_file: ${{ steps.set_fixed_name.outputs.jar_file }}
    steps:
      - name: Download plugin directory
        uses: actions/download-artifact@v4
        with:
          name: plugin-files
          path: plugin

      - name: Download JAR artifact from Java App release
        id: download_jar
        env:
          JAVA_APP_PAT: ${{ secrets.JAVA_APP_PAT }}
        run: |
          REPO="stapeDev/it.stapedev.api.mokkybuddy"
          VERSION="${{ needs.checkout.outputs.java_version_clean }}"
          echo "Downloading artifact for version $VERSION from $REPO"

          RELEASE_ID=$(curl -s -H "Authorization: token $JAVA_APP_PAT" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/releases/tags/v$VERSION" \
            | jq -r '.id')

          if [ -z "$RELEASE_ID" ] || [ "$RELEASE_ID" == "null" ]; then
            echo "Release not found!"
            exit 1
          fi

          ASSET_URL=$(curl -s -H "Authorization: token $JAVA_APP_PAT" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/releases/$RELEASE_ID/assets" \
            | jq -r '.[] | select(.name | endswith(".jar")) | .url')

          if [ -z "$ASSET_URL" ]; then
            echo "Artifact JAR not found!"
            exit 1
          fi

          curl -L -H "Authorization: token $JAVA_APP_PAT" \
              -H "Accept: application/octet-stream" \
              "$ASSET_URL" -o plugin/resources/mokkyBuddyAPI.jar

      - name: Upload updated plugin directory
        uses: actions/upload-artifact@v4
        with:
          name: plugin-files-updated
          path: plugin

  update-version:
    runs-on: ubuntu-latest
    needs: prepare-jar
    steps:
      - name: Checkout Plugin Repo
        uses: actions/checkout@v3
        with:
          repository: stapeDev/it.stapedev.vscode.mokkybuddy
          token: ${{ secrets.GITHUB_TOKEN }}
          path: plugin

      - name: Reset working directory and sync with remote
        working-directory: plugin
        run: |
          git fetch origin main
          git reset --hard origin/main

      - name: Download updated plugin directory
        uses: actions/download-artifact@v4
        with:
          name: plugin-files-updated
          path: tmp_plugin

      - name: Copy files into checked-out repo
        run: cp -R tmp_plugin/* plugin/

      - name: Check if version exists on Marketplace
        id: version_check
        working-directory: plugin
        run: |
          VERSION=${{ needs.checkout.outputs.java_version_clean }}
          EXISTS=$(npx vsce show StapeDev.mokky-buddy-api-runner@$VERSION --json || echo "{}")
          if [[ $EXISTS != "{}" ]]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set plugin version
        working-directory: plugin
        run: |
          JAVA_VERSION=${{ needs.checkout.outputs.java_version_clean }}
          CURRENT_VERSION=$(jq -r '.version' package.json)
          if [ "${{ steps.version_check.outputs.exists }}" == "true" ]; then
            NEW_VERSION=$(npm version patch --no-git-tag-version)
          else
            npm version $JAVA_VERSION --no-git-tag-version
            NEW_VERSION=$JAVA_VERSION
          fi
          jq --arg v "$NEW_VERSION" '.version=$v' vss-extension.json > vss-extension.tmp.json
          mv vss-extension.tmp.json vss-extension.json

      - name: Commit version bump
        working-directory: plugin
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add package.json vss-extension.json resources/mokkyBuddyAPI.jar
          if ! git diff --cached --quiet; then
            git commit -m "Update plugin version and JAR [skip ci]"
            git push origin main --force-with-lease
          else
            echo "No changes to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload plugin directory
        uses: actions/upload-artifact@v4
        with:
          name: plugin-files-updated-version
          path: plugin

  update-docs:
    runs-on: ubuntu-latest
    needs: update-version
    steps:
      - name: Checkout Plugin Repo
        uses: actions/checkout@v3
        with:
          repository: stapeDev/it.stapedev.vscode.mokkybuddy
          token: ${{ secrets.GITHUB_TOKEN }}
          path: plugin

      - name: Checkout Java App Repo for changelog
        uses: actions/checkout@v3
        with:
          repository: stapeDev/it.stapedev.api.mokkybuddy
          ref: main
          token: ${{ secrets.JAVA_APP_PAT }}
          path: app

      - name: Download plugin directory
        uses: actions/download-artifact@v4
        with:
          name: plugin-files-updated-version
          path: tmp_plugin

      - name: Copy files into checked-out repo
        run: cp -R tmp_plugin/* plugin/

      - name: Update README, CHANGELOG, FEATURES dynamically
        working-directory: plugin
        run: |
          VERSION=$(jq -r '.version' package.json)

          # Aggiorna badge versione nel README
          sed -i "s/badge\/version-[0-9]\+\.[0-9]\+\.[0-9]\+/badge\/version-$VERSION/" README.md

          # --- Generazione CHANGELOG.md e FEATURES.md dalla repo Java ---
          cd ../app
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            RANGE="HEAD~20..HEAD"
          else
            RANGE="$LAST_TAG..HEAD"
          fi

          FEATS=$(git log $RANGE --grep '^feat' --pretty=format:"- %s (%an)")
          FIXES=$(git log $RANGE --grep '^fix' --pretty=format:"- %s (%an)")
          CHORES=$(git log $RANGE --grep '^chore' --pretty=format:"- %s (%an)")
          BREAKING=$(git log $RANGE --grep 'BREAKING CHANGE' --pretty=format:"- %s (%an)")

          cd ../plugin
          # CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
          fi
          CHANGELOG_TMP=$(mktemp)
          echo "## Version $VERSION ($(date +'%Y-%m-%d'))" >> $CHANGELOG_TMP
          [ -n "$FEATS" ] && echo -e "\n### Features" >> $CHANGELOG_TMP && echo "$FEATS" >> $CHANGELOG_TMP
          [ -n "$FIXES" ] && echo -e "\n### Fixes" >> $CHANGELOG_TMP && echo "$FIXES" >> $CHANGELOG_TMP
          [ -n "$CHORES" ] && echo -e "\n### Chores" >> $CHANGELOG_TMP && echo "$CHORES" >> $CHANGELOG_TMP
          [ -n "$BREAKING" ] && echo -e "\n### BREAKING CHANGES" >> $CHANGELOG_TMP && echo "$BREAKING" >> $CHANGELOG_TMP
          cat $CHANGELOG_TMP CHANGELOG.md > CHANGELOG.new && mv CHANGELOG.new CHANGELOG.md

          # FEATURES.md
          if [ ! -f FEATURES.md ]; then
            echo "# Features" > FEATURES.md
          fi
          echo "## Version $VERSION ($(date +'%Y-%m-%d'))" >> FEATURES.md
          echo "$FEATS" >> FEATURES.md

          # Commit su main
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add README.md CHANGELOG.md FEATURES.md
          if ! git diff --cached --quiet; then
            git commit -m "Update README, CHANGELOG, FEATURES [skip ci]"
            git push origin main --force-with-lease
          else
            echo "No changes to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-plugin:
    runs-on: ubuntu-latest
    needs: update-docs
    steps:
      - name: Download final plugin directory
        uses: actions/download-artifact@v4
        with:
          name: plugin-final
          path: plugin

      - name: Install dependencies
        working-directory: plugin
        run: npm install

      - name: Run tests
        working-directory: plugin
        run: npm test

      - name: Build VSCode Plugin
        working-directory: plugin
        run: npx vsce package

      - name: Upload Plugin Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mokkybuddy-vscode-plugin
          path: plugin/*.vsix

  publish:
    runs-on: ubuntu-latest
    needs: build-plugin
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download final plugin directory
        uses: actions/download-artifact@v4
        with:
          name: plugin-final
          path: plugin

      - name: Install TypeScript types
        working-directory: plugin
        run: npm install --save-dev @types/node @types/mocha

      - name: Publish VSCode Plugin
        working-directory: plugin
        run: npx @vscode/vsce publish
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
